= State of the Art Review

This chapter is dedicated to identifying instances where microfrontends have been implemented and evaluating the outcomes of these applications. It is organized into two sections: academic literature and industry case studies. The academic literature section examines research that investigates the application and effectiveness of microfrontends across various contexts. The industry case studies section, on the other hand, provides detailed insights into real-world examples, highlighting the practical benefits and challenges encountered by companies that have adopted microfrontend architecture.

== Academic Literature

In their paper, Wang et al. @wang_NovelApplicationEducational_2020 discuss the challenges faced by a monolithic single-page application within an educational management system, specifically issues such as complex logic, high coupling, and difficulties with incremental updates, which are similar to the problems observed at @dklb project. To address these challenges, they propose adopting a microfrontend architecture for East China Normal University's graduate information system, aiming to enhance agile development, service separation, and efficient incremental upgrades. The outcomes of this approach are positive. However, the authors also emphasize the importance of bounded contexts in the design of each microfrontend, which contribute to an improved user experience by maintaining clear functional boundaries.

Perlin et al. @perlin_ApproachFollowMicroservices_2023 explore the application of microservices principles to frontend development by introducing a microfrontends architecture that utilizes multiple frontend frameworks to achieve technological independence and modularity. This approach is validated through a prototype implemented on the Animal Health Defense Platform of Rio Grande do Sul, demonstrating the successful integration of components developed with various frontend frameworks. By employing this strategy, seamless integration and component sharing are achieved. While the case study underscores significant benefits in terms of modularity and flexibility, it also highlights challenges related to interface consistency and operational complexity. While microfrontends can be developed using different frameworks, this approach introduces additional operational complexity, which can potentially result in a system that is more challenging to manage.

Männistö et al. @mannisto_ExperiencesFrameworklessMicroFrontend_2023 examine the transformation of a monolithic user interface into a microfrontend solution at Visma, focusing on the work of a small development team. The primary motivations behind this transition were to enhance customer-specific configurability and reduce operational costs. During the process, the team observed significant improvements in scalability and deployment efficiency. These benefits were realized despite the team's limited size, highlighting the feasibility and advantages of adopting microfrontend architecture even within smaller organizational settings. The study's findings suggest that small teams can confidently pursue the development of frontend applications using a microfrontend approach.

In the field of Internet of Things (IoT), Mena et al. @mena_ProgressiveWebApplication_2019 introduce a progressive web application that utilizes microservices and microfrontends to integrate geospatial data and IoT information. The microfrontend approach allows for the independent development and deployment of UI components, fostering modularity and scalability. This architecture enables the frontend to dynamically adapt to various user contexts, such as location and device type, ensuring a seamless user experience. 

Similarly, in the mobile domain, Capdepon et al. @capdepon_MigrationProcessMonolithic_ present a model-driven engineering approach for migrating monolithic mobile applications to a microfrontend architecture. This method involves re-architecting applications into smaller, more manageable units, achieving comparable benefits in terms of modularity and scalability.

Further advancing this concept, Shakil et al. and Simoes et al. propose a modular architecture based on microfrontend principles, specifically designed to address the unique requirements of industrial applications. Their studies report positive outcomes from this architectural transition, demonstrating the effectiveness of microfrontends in enhancing the composability and adaptability of industrial systems @shakil_ModularArchitectureIndustrial_2020 @simoes_TwinArkUnifiedFramework_2023.

Lastly, a thorough literature review conducted by Severi Peltonen, Luca Mezzalira, and Davide Taibi, as presented in their 2021 study @peltonen_MotivationsBenefitsIssues_2021, examines findings from 173 diverse sources, including blogs, articles, conference papers and journal publications. Their review highlights the advantages of microfrontends architecture in frontend development, such as enhancing team autonomy, accelerating the delivery of new features, and supporting diverse technology stacks. These benefits contribute to easier on-boarding processes and improved fault isolation, making microfrontends a valuable strategy for managing large and complex frontend applications. However, the review also brings several challenges, including increased payload size, potential code duplication, complexity in monitoring, and difficulties in maintaining a consistent user experience.

== Industry Case Studies

OTTO, a leading German online retailer, restructured its monolithic system to improve extensibility and maintainability. By adopting a distributed, vertical micro-architecture, now recognized as microfrontends architecture, OTTO successfully divided its application into smaller, independent units aligned with specific business domains. This transformation enhanced system adaptability, development efficiency, and overall performance @_MonolithsMicroservicesOTTO_. Similarly, Galeria Kaufhof, another German retailer, adopted this approach in their "Jump" project, achieving comparable success in improving their system's performance and flexibility @gmbh_InoioGmbhJump_2014.

The German bookstore chain Thalia successfully transitioned from a monolithic system to microfrontends, particularly within their eReader-Shop team. Over a span of two years, this shift led to a more cohesive team, faster and higher-quality feature rollouts, and greater independence of services. The frequency of deployments increased significantly, with 49 deployments of new services occurring over a two-month period, in contrast to  five deployments under the previous system. This approach has enhanced the team's efficiency, transparency, and adaptability, thereby strengthening Thalia's system and streamlining their development processes @gruber_AnotherOneBites_2019.

Although there are no official documents confirming that SAP, the German software giant, uses microfrontends internally, they have developed a JavaScript framework called Luigi. This framework leverages iframes for implementing microfrontends and offers a comprehensive range of APIs and configuration options to facilitate smooth architectural transformations of applications. Luigi is designed to help developers integrate microfrontends seamlessly into existing systems, providing a flexible and robust solution for modernizing application architectures @_LuigiEnterpriseReadyMicro_.

Zalando, another leading German online retailer, transitioned to microfrontends through their Mosaic project, breaking down the front end into smaller, isolated components. This shift improved scalability, enabled independent deployments, and empowered team autonomy. However, it initially caused user experience inconsistencies and increased infrastructure complexity. To resolve these issues, Zalando developed the Interface Framework to centralize rendering and ensure platform-wide consistency, refining their microfrontends approach @_ZalandoEngineeringBlog_2018. Similarly, both HelloFresh and IKEA have adopted comparable strategies, underscoring the benefits of microfrontends in the retail sector @senders_FrontendMicroservicesHelloFresh_2017 @jan_ExperiencesUsingMicro_.

#pagebreak(weak: true)